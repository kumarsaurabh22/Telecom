# Purpose : To build CUR Monthly - Captures upgrades at user level, TTU, Loyalty at monthly level

# Description : This query captures the users who upgrade their phones within 6 to 48 months. The query also provides the device details and specs 

# Input : 5 tables [ganges.device_modeling_table, group_mr.portal_table_P1_parameter_AA ,group_mr.CU_Output_Device_Loyalty_Store_Bands_Lookup , group_mr.output_into_excel_main_From_2009_Till_2012, group_mr.output_into_excel_main ]

# Output : 2 tables [group_mr.CU_Output , group_mr.CU_Output_Device_Loyalty_Rate]

# Developer : Achyut Anand
# Date : 2018-04-24
---------------------------------------------------------------------------------------------------------------------------------------
# Start Logging
import datetime as D
today = D.datetime.today()

import logging
logger = logging.getLogger(__name__)
LogFile = "oct_log_" + str(today) + ".log";

# Get a file handler (to print to a log file) and ac stream handler (to print to the screen)
file_handler = logging.FileHandler(LogFile)
stream_handler = logging.StreamHandler()

logger.addHandler(file_handler)
logger.addHandler(stream_handler)

# Format
formatter = logging.Formatter('%(asctime)s: %(levelname)s: %(module)s: %(message)s')
file_handler.setFormatter(formatter)
stream_handler.setFormatter(formatter)

# Set log level - INFO fine for now
logger.setLevel(logging.INFO)
---------------------------------------------------------------------------------------------------------------------------------------
%run /GROUPS/mr/Telecom/Telecom_Migration/Reusable_Functions
---------------------------------------------------------------------------------------------------------------------------------------
from pyspark.sql.types import DoubleType, IntegerType, StringType, DateType, StructType, StructField
from pyspark.sql import *
import pyspark.sql.functions as F
import pyspark.sql.window as W
---------------------------------------------------------------------------------------------------------------------------------------
# Portal P1 parameter schema

# Converting the portal table from Pandas DF to PySpark DF
schema = StructType([StructField("ModelID",IntegerType(), True)\
                     ,StructField("Manufacturer_id",IntegerType(), True)\
                     ,StructField("Model_Name",StringType(), True)\
                     ,StructField("Manufacturer_Name",StringType(), True)\
                     ,StructField("Device_Type",StringType(), True)\
                     ,StructField("OS",StringType(), True)\
                     ,StructField("Display_Size",StringType(), True)\
                     ,StructField("Battery",StringType(), True)\
                     ,StructField("Processor",StringType(), True)\
                     ,StructField("ProcessorSpeed",StringType(), True)\
                     ,StructField("Processor_Cores",StringType(), True)\
                     ,StructField("ChipManufacturer",StringType(), True)\
                     ,StructField("ChipModel",StringType(), True)\
                     ])
---------------------------------------------------------------------------------------------------------------------------------------
## Declare variables

# Input tables
source_table = 'ganges.device_modeling_table'

# Lookup Tables
Customer_id_Canada = 'group_mr.Customer_id_Canada'
Customer_id_US = 'group_mr.Customer_id_US'
Device_Loyalty_Store_band_lookup  = "group_mr.CU_Output_Device_Loyalty_Store_Bands_Lookup"
output_into_excel_main_From_2009_Till_2012 = "group_mr.output_into_excel_main_From_2009_Till_2012"
output_into_excel_main = "group_mr.output_into_excel_main"

# Portal Tables
Portal_DeviceP1Parameters = 'Portal_DeviceP1Parameters.csv'

# Output tables
CU_Output_output_table = 'group_mr.CU_Output'
CU_Output_Device_Loyalty_Rate_output_table = 'group_mr.CU_Output_Device_Loyalty_Rate'
CU_Output_Single_Sankey_output_table = 'group_mr.CU_Output_Single_Sankey'
---------------------------------------------------------------------------------------------------------------------------------------
# Creating dataframes and fetching portal table
# Input table
source_table = spark.table(source_table)

# Lookup Tables
output_into_excel_main_From_2009_Till_2012 = spark.table(output_into_excel_main_From_2009_Till_2012)
output_into_excel_main = spark.table(output_into_excel_main).where("Model <> 'All Other/Low Volume/Older Models'")
output_into_excel_main_From_2009_df = output_into_excel_main_From_2009_Till_2012.union(output_into_excel_main)
Device_Loyalty_Store_band_lookup  = spark.table(Device_Loyalty_Store_band_lookup)
Customer_id_Canada_df = spark.table(Customer_id_Canada)
Customer_id_US_df = spark.table(Customer_id_US)

# Portal Tables
Portal_DeviceP1Parameters = HRG_Load_Portal_Tables(Portal_DeviceP1Parameters)
portal_P1_specs = sqlContext.createDataFrame(Portal_DeviceP1Parameters, schema)
---------------------------------------------------------------------------------------------------------------------------------------

def CUR_Monthly(source_table,Device_Loyalty_Store_band_lookup,portal_P1_specs,output_into_excel_main_From_2009_Till_2012,output_into_excel_main):

# reading the table in the dataframe

  portal_specs_df = portal_P1_specs
  
# Remove dataset = 'g' when the testing is done on Thames data
# Filtering  Operators which are required in Upgrade report
  source_table_df = source_table\
  .where("dataset = 'g'")\
#   .where("operator in ('Verizon','US Cellular','T-Mobile','AT&T','Cricket','Boost','Other','Virgin','MetroPCS','Sprint','AT&T & Cricket','Boost & Virgin')")

  
# To attach all the useful parameters (like "Days Between", "Plan Type", etc.) at the transaction level before generating the output table
# Selecting the Transaction type Sale data from the clean input table


  CU_Input_Cleaned_With_PlanType_df = source_table_df\
  .where("store_device = 1")\
  .where("transactionType = 'Sale'")\
  .where("device_type in ('Smartphone', 'Feature Phone')")\
  .select('company'\
        ,'StoreID'\
        , 'SaleNumber'\
        ,'TransactionType'\
        ,'dateCreated'\
        ,'priority'\
        ,'serialnumber'\
        ,'operator'\
        ,'Manufacturer_final'\
        ,'Model_final'\
        ,F.col('financing').alias('plan_type')\
        ,F.col('cust_id_sn').alias('customerid'))

# Retainig data for a particular set of customer id based on area code lookup

  CU_Input_Cleaned_With_PlanType_Canada_df = CU_Input_Cleaned_With_PlanType_df\
  .where("(length(customerid) = 10 or customerid like '___-___-____' or customerid LIKE '(___)___-____' or customerid LIKE '___ ___ ____' or customerid LIKE '_____-_____')")\
  .where("customerid NOT LIKE '%[A-Za-z]%'")\
  .where("customerid NOT LIKE '[1|0]%'")\
  .where("customerid NOT LIKE '%0000000%'")\
  .where("customerid NOT LIKE '%1111111%'")\
  .where("customerid NOT LIKE '%2222222%'")\
  .where("customerid NOT LIKE '%3333333%'")\
  .where("customerid NOT LIKE '%4444444%'")\
  .where("customerid NOT LIKE '%5555555%'")\
  .where("customerid NOT LIKE '%6666666%'")\
  .where("customerid NOT LIKE '%7777777%'")\
  .where("customerid NOT LIKE '%8888888%'")\
  .where("customerid NOT LIKE '%9999999%'")

  CU_Input_Cleaned_With_PlanType_Canada_df = CU_Input_Cleaned_With_PlanType_Canada_df.alias('a')\
  .join(
  Customer_id_Canada_df.alias('b'),
    [
     F.substring('a.customerid',1,3) == F.col('b.Canada_Id')
    ],'inner')\
  .select('a.*')

  CU_Input_Cleaned_With_PlanType_US_df = CU_Input_Cleaned_With_PlanType_df\
  .where("customerid LIKE '(___)___-____'")

  CU_Input_Cleaned_With_PlanType_US_df = CU_Input_Cleaned_With_PlanType_US_df.alias('a')\
  .join(
    Customer_id_US_df.alias('b'),
    [
     F.substring('a.customerid',1,3) == F.col('b.US_Id')
    ],'inner')\
  .select('a.*')

  CU_Input_Cleaned_With_PlanType_df = CU_Input_Cleaned_With_PlanType_Canada_df.union(CU_Input_Cleaned_With_PlanType_US_df)


## Change plan_type to Other when unapproved plan shows up under a given operator


  CU_Input_Cleaned_With_PlanType_df = CU_Input_Cleaned_With_PlanType_df.alias('a')\
  .withColumn('plan_type',
              F.when(
                (F.col('a.operator')=='AT&T')
                & (F.col('a.plan_type')
                   .isin('Next - Can''t Classify', 'Next 12', 'Next 18', 'Next 24', 'Next With Downpayment', 'Next', 'Next Every Year')==False)
                |(F.col('a.plan_type').isNull())
                ,'Other')\
               .when(
                 (F.col('a.operator')
                  .isin('Bell Mobility', 'Boost', 'Cricket', 'MetroPCS', 'Rogers Wireless', 'Telus', 'US Cellular', 'Virgin Mobile U.S.')==True)
                 |(F.col('a.plan_type').isNull())
                 ,'Other')\
               .when(
                 (F.col('a.operator')=='Sprint')
                 & (F.col('a.plan_type')
                    .isin('Easy Pay', 'Lease - Can''t Classify','Galaxy Forever', 'iPhone Forever','Lease', 'Lease 12', 'Lease 17', 'Lease 18', 'Lease 24', 'Lease 30','Sprint Flex')==False)
                 |(F.col('a.plan_type').isNull())
                 ,'Other')\
               .when(
                 (F.col('a.operator')=='T-Mobile')
                 & (F.col('a.plan_type')
                    .isin('Jump', 'Jump!', 'Jump On Demand', 'Jump! On Demand', 'Score', 'Jump Plus', 'Jump! Plus')==False)
                 |(F.col('a.plan_type').isNull())
                 ,'Other')\
               .when(
                 (F.col('a.operator')=='Verizon')
                 & (F.col('a.plan_type')
                    .isin('Device Payment', 'Device Payment - EIP', 'Device Payment - EUP', 'Edge')==False)
                 |(F.col('a.plan_type').isNull())
                 ,'Other')
              .otherwise(F.col('a.plan_type')))\
  .select('company','StoreID', 'SaleNumber','TransactionType','customerid',
          'dateCreated','priority','serialnumber','operator','Manufacturer_final',
          'Model_final', F.col('plan_type').alias('plan_type'))\
  .withColumn('RN2',F.row_number()
              .over(W.Window.partitionBy(F.col('customerid'))
                    .orderBy(F.asc('dateCreated'))))\
  .orderBy(F.asc('RN2'))

# Create the transaction level table with "days between" column

# This step will find the Start and End priorities for each transaction in CU_Input_Cleaned table.


  CU_SKU_Level_Output_df = CU_Input_Cleaned_With_PlanType_df.alias('a')\
  .join(
    CU_Input_Cleaned_With_PlanType_df.alias('b'),
    [
      F.col('a.customerid')== F.col('b.customerid'),
      ((F.col('a.RN2') == F.col('b.RN2') - 1) |
      (F.col('a.RN2') + 1 == F.col('b.RN2')))
    ],
    'full_outer')\
  .where("a.customerid is not NULL and b.datecreated is not NULL")\
  .select('a.customerid',\
          F.col('a.dateCreated').alias('Device1_PurchaseDate'),\
          F.col('a.operator').alias('Device1_Operator'),\
          F.col('a.manufacturer_final').alias('Device1_Manufacturer'),\
          F.col('a.model_final').alias('Device1_Model'),\
          F.col('a.plan_type').alias('Device1_PlanType'),\
          F.col('b.dateCreated').alias('Device2_PurchaseDate'),\
          F.col('b.operator').alias('Device2_Operator'),\
          F.col('b.manufacturer_final').alias('Device2_Manufacturer'),\
          F.col('b.model_final').alias('Device2_Model'),\
          F.col('b.plan_type').alias('Device2_PlanType'))\
  .withColumn('Days_Between',F.datediff(F.col('Device2_PurchaseDate'),F.col('Device1_PurchaseDate')))

# Calculating metrics like Time to Upgrade
  
  temp1_df = CU_SKU_Level_Output_df\
  .groupBy(date_trunc(F.col('Device1_PurchaseDate'),'month').alias('Device1_PurchaseMonth'),\
           F.col('Device1_Operator'),\
           F.col('Device1_Manufacturer'),\
           F.col('Device1_Model'),\
           F.col('Device1_PlanType'),\
           date_trunc(F.col('Device2_PurchaseDate'),'month').alias('Device2_PurchaseMonth'),\
           F.col('Device2_Operator'),\
           F.col('Device2_Manufacturer'),\
           F.col('Device2_Model'),\
           F.col('Device2_PlanType'))\
  .agg(F.count(F.lit(1)).alias('Quantity'),\
       F.avg(F.months_between(F.col('Device2_PurchaseDate'),F.col('Device1_PurchaseDate'))).alias('TTU_in_Months'))\
  .select('Device1_PurchaseMonth'\
          ,'Device1_Operator'\
          ,'Device1_Manufacturer'\
          ,'Device1_Model',\
          F.when((F.col('Device1_Operator').isin('Telus', 'Rogers Wireless', 'Chatr','Cincinnati Bell','Fido','MTS','Other','Koodo','Mobilicity', 'Pocket Communications','Sasktel','Shentel','TracFone','Virgin Mobile Canada','Cellcom', 'Bell Mobility', 'Freedom Mobile')==True),'Canada').otherwise('US').alias('Device1_Country'),\
          'Device1_PlanType'\
          ,'Device2_PurchaseMonth'\
          ,'Device2_Operator'\
          ,'Device2_Manufacturer'\
          ,'Device2_Model',\
          F.when((F.col('Device2_Operator').isin('Telus', 'Rogers Wireless', 'Chatr','Cincinnati Bell','Fido','MTS','Other','Koodo','Mobilicity', 'Pocket Communications','Sasktel','Shentel','TracFone','Virgin Mobile Canada','Cellcom', 'Bell Mobility', 'Freedom Mobile')==True),'Canada').otherwise('US').alias('Device2_Country'),'Device2_PlanType','Quantity','TTU_in_Months')
                                                                        
# Cleanup output table

# Add row number to output table based on device purchase qurter.
# Fixing Specs.
# Merging Boost and Virgin because Virgin''s sample is too small
# Getting final output

# removing data with Null values

  temp1_df = temp1_df.where(" not (TTU_in_Months is null or Device1_Operator is null or Device1_Manufacturer is null or Device1_Model is null or Device2_Operator is null or Device2_Manufacturer is null or Device2_Model is null or Device1_Country <> Device2_Country) ")

# Introducting Purchase Quarter column
  temp1a_df = temp1_df\
  .withColumn('Device1_PurchaseQuarter',F.to_date(F.concat_ws('-',F.year('Device1_PurchaseMonth'),F.quarter('Device1_PurchaseMonth')* 3-2, F.lit(1))))\
  .withColumn('Device2_PurchaseQuarter',F.to_date(F.concat_ws('-',F.year('Device2_PurchaseMonth'),F.quarter('Device2_PurchaseMonth')* 3-2, F.lit(1))))


# Adding the device 1 and device 2 quarter fields

  temp1b_df = temp1a_df\
  .select(F.col('Device1_PurchaseQuarter'),F.col('Device2_PurchaseQuarter')).distinct()\
  .orderBy(F.col('Device1_PurchaseQuarter'),F.col('Device2_PurchaseQuarter'))


# Add row number to output table based on device purchase quarter.
  temp1b_df = temp1b_df\
  .withColumn('QuarterNumber',F.row_number().over(W.Window.partitionBy(F.col('Device1_PurchaseQuarter')).orderBy(F.asc('Device1_PurchaseQuarter'), F.asc('Device2_PurchaseQuarter'))))

# Including Quarter number
  temp1c_df = temp1a_df.alias('a')\
  .join(temp1b_df.alias('b'),\
        [
           F.col('a.Device1_PurchaseQuarter') == F.col('b.Device1_PurchaseQuarter'),
           F.col('a.Device2_PurchaseQuarter') == F.col('b.Device2_PurchaseQuarter'),
        ],'inner')\
  .select(F.col('a.*'),F.col('b.QuarterNumber'))


#Joining with Portal_DeviceP1Parameters table to add the specs to the output


  temp1d_df = temp1c_df.alias('a')\
  .join(portal_specs_df.alias('b'),
      [
        F.col('a.Device1_Manufacturer')== F.col('b.Manufacturer_Name'),
        F.col('a.Device1_Model') == F.col('b.Model_Name')
      ],
      'left').join(portal_specs_df.alias('c'),
                  [
                    F.col('a.Device2_Manufacturer') == F.col('c.Manufacturer_Name'),
                    F.col('a.Device2_Model') == F.col('c.Model_Name')
                  ],'left')\
  .where("a.Device1_PurchaseMonth is not null")\
  .where("a.Device1_Operator is not null")\
  .where("a.Device1_Manufacturer is not null")\
  .where("a.Device1_Model is not null")\
  .where("a.Device2_PurchaseMonth is not null")\
  .where("a.Device2_Operator is not null")\
  .where("a.Device2_Manufacturer is not null")\
  .where("a.Device2_Model is not null")\
  .where("a.TTU_in_Months >= 6")\
  .where("a.TTU_in_Months <= 48")\
  .orderBy('a.Device1_PurchaseMonth','a.Device1_Operator','a.Device1_Manufacturer','a.Device1_Model',
           'a.Device1_PlanType','a.Device2_PurchaseMonth','a.Device2_Operator','a.Device2_Manufacturer',
           'a.Device2_Model','a.Device2_PlanType')\
  .select(F.col('a.Device1_Country').alias('Country'),\
          'a.Device1_PurchaseMonth',\
          'a.Device1_PurchaseQuarter',\
          'a.QuarterNumber',\
          'a.Device1_Operator',\
          'a.Device1_Manufacturer',\
          'a.Device1_Model',\
          F.col('b.OS').alias('Device1_OS'),\
          F.col('b.Device_Type').alias('Device1_Smartphone'),\
          F.col('b.Display_Size').alias('Device1_Display_PhysicalSize'),\
          F.col('b.battery').alias('Device1_BatteryCapacity'),\
          F.col('b.ChipModel').alias('Device1_Chip'),\
          F.col('b.ChipManufacturer').alias('Device1_Chip_Designer_Mfg'),\
          F.col('b.Processor_Cores').alias('Device1_Number_of_Cores'),\
          F.col('b.ProcessorSpeed').alias('Device1_ProcessorSpeed'),\
         'a.Device1_PlanType',\
         'a.Device2_PurchaseMonth',\
         'a.Device2_PurchaseQuarter',\
         'a.Device2_Operator',\
         'a.Device2_Manufacturer',\
         'a.Device2_Model',\
          F.col('c.OS').alias('Device2_OS'),\
          F.col('c.Device_Type').alias('Device2_Smartphone'),\
          F.col('c.Display_Size').alias('Device2_Display_PhysicalSize'),\
          F.col('c.battery').alias('Device2_BatteryCapacity'),\
          F.col('c.ChipModel').alias('Device2_Chip'),\
          F.col('c.ChipManufacturer').alias('Device2_Chip_Designer_Mfg'),\
          F.col('c.Processor_Cores').alias('Device2_Number_of_Cores'),\
          F.col('c.ProcessorSpeed').alias('Device2_ProcessorSpeed'),\
         'a.Device2_PlanType',\
         'a.Quantity',\
         'a.TTU_in_Months')

# Adding column to get the Operator Tier and Screen Size band

  temp1d_df = temp1d_df.alias('a')\
  .withColumn("Device1_Operator_Tier",
            F.when(
              (F.col('a.Device1_Operator')
               .isin('AT&T', 'T-Mobile', 'Sprint', 'Verizon')==True)
              ,'Tier 1')\
            .when(
              (F.col('a.Device1_Operator')
               .isin('Boost','Cricket','MetroPCS','US Cellular', 'Virgin Mobile U.S.')==True)
              ,'Tier 2')
            .otherwise('NA'))\
  .withColumn("Device2_Operator_Tier",
            F.when(
              (F.col('a.Device2_Operator')
               .isin('AT&T', 'T-Mobile', 'Sprint', 'Verizon')==True)
              ,'Tier 1')\
            .when(
              (F.col('a.Device2_Operator')
               .isin('Boost','Cricket','MetroPCS','US Cellular', 'Virgin Mobile U.S.')==True)
              ,'Tier 2')
            .otherwise('NA'))\
  .withColumn("Device1_ScreenSizeBand",
            F.when((F.col('a.Device1_Display_PhysicalSize').cast(DoubleType()))< 2,'Band 1) 0-1.99')\
            .when((F.col('a.Device1_Display_PhysicalSize').cast(DoubleType()))< 3,'Band 2) 2-2.99')\
            .when((F.col('a.Device1_Display_PhysicalSize').cast(DoubleType()))< 4,'Band 3) 3-3.99')\
            .when((F.col('a.Device1_Display_PhysicalSize').cast(DoubleType()))< 5,'Band 4) 4-4.99')\
            .when((F.col('a.Device1_Display_PhysicalSize').cast(DoubleType()))< 6,'Band 5) 5-5.99')\
            .when((F.col('a.Device1_Display_PhysicalSize').cast(DoubleType())) >= 6,'Band 6) >6 inches').otherwise('NA'))\
  .withColumn("Device2_ScreenSizeBand",F.when((F.col('a.Device2_Display_PhysicalSize').cast(DoubleType()))< 2,'Band 1) 0-1.99')\
            .when((F.col('a.Device2_Display_PhysicalSize').cast(DoubleType()))< 3,'Band 2) 2-2.99')\
            .when((F.col('a.Device2_Display_PhysicalSize').cast(DoubleType()))< 4,'Band 3) 3-3.99')\
            .when((F.col('a.Device2_Display_PhysicalSize').cast(DoubleType()))< 5,'Band 4) 4-4.99')\
            .when((F.col('a.Device2_Display_PhysicalSize').cast(DoubleType()))< 6,'Band 5) 5-5.99')\
            .when((F.col('a.Device2_Display_PhysicalSize').cast(DoubleType())) >= 6,'Band 6) >6 inches').otherwise('NA'))\
  .withColumn("GMV_TTU", F.col('a.TTU_in_Months')*(F.col('a.Quantity').cast(DoubleType())))


# Computing prices


  output_into_excel_main = output_into_excel_main.where("Model <> 'All Other/Low Volume/Older Models'")
  output_into_excel_main_From_2009_df = output_into_excel_main_From_2009_Till_2012.union(output_into_excel_main)

  Phone_prices_df = output_into_excel_main_From_2009_df\
  .groupBy('Month_Year','Operator','Manufacturer','Model')\
  .agg(F.avg('Avg_Store_Cost').alias('Avg_Store_Cost')\
       ,F.avg('Avg_Retail_Price').alias('Avg_Retail_Price')\
       ,F.avg('Full_Cash_Price').alias('Avg_Full_Cash_Price')\
       ,F.avg('Online_Advertised_Price').alias('Avg_Online_Advertised_Price'))


# Update temp1d_df

# Nokia to Microsoft/ HMD Global - Nokia : FIX	

  temp1d_df= temp1d_df.alias('a')\
  .withColumn('Device1_Manufacturer',
              F.when(
                (F.col('a.Device1_Manufacturer')=='Nokia')
                &(F.col('a.Device1_PurchaseMonth')>= '2014-05-01') 
                &(F.col('a.Device1_PurchaseMonth') <= '2016-11-01')
                ,'Microsoft')\
              .when(
                (F.col('a.Device1_Manufacturer') == 'Nokia')
                &(F.col('a.Device1_PurchaseMonth')>= '2016-12-01')
                ,'HMD Global - Nokia')
              .otherwise(F.col('a.Device1_Manufacturer')))\
  .withColumn('Device2_Manufacturer',
              F.when(
                (F.col('a.Device2_Manufacturer')=='Nokia')
                &(F.col('a.Device2_PurchaseMonth')>= '2014-05-01')
                &(F.col('a.Device2_PurchaseMonth') <= '2016-11-01')
                ,'Microsoft')\
              .when(
                (F.col('a.Device2_Manufacturer') == 'Nokia')
                &(F.col('a.Device2_PurchaseMonth')>= '2016-12-01')
                ,'HMD Global - Nokia')
              .otherwise(F.col('a.Device2_Manufacturer')))\
  .select('country'\
          ,'Device1_PurchaseMonth'\
          ,'Device1_PurchaseQuarter'\
          ,'QuarterNumber'\
          ,'Device1_Operator'\
          ,F.col('Device1_Manufacturer').alias('Device1_Manufacturer')\
          ,'Device1_Model'\
          ,'Device1_OS'\
          ,'Device1_Smartphone'\
          ,'Device1_Display_PhysicalSize'\
          ,'Device1_BatteryCapacity'\
          ,'Device1_Chip'\
          ,'Device1_Chip_Designer_Mfg'\
          ,'Device1_Number_of_Cores'\
          ,'Device1_ProcessorSpeed'\
          ,'Device1_PlanType'\
          ,'Device2_PurchaseMonth'\
          ,'Device2_PurchaseQuarter'\
          ,'Device2_Operator'\
          ,F.col('Device2_Manufacturer').alias('Device2_Manufacturer')\
          ,'Device2_Model'\
          ,'Device2_OS'\
          ,'Device2_Smartphone'\
          ,'Device2_Display_PhysicalSize'\
          ,'Device2_BatteryCapacity'\
          ,'Device2_Chip'\
          ,'Device2_Chip_Designer_Mfg'\
          ,'Device2_Number_of_Cores'\
          ,'Device2_ProcessorSpeed'\
          ,'Device2_PlanType'\
          ,'Quantity'\
          ,'TTU_in_Months'\
          ,'Device1_Operator_Tier'\
          ,'Device2_Operator_Tier'\
          ,'Device1_ScreenSizeBand'\
          ,'Device2_ScreenSizeBand'\
          ,'GMV_TTU')

# # Attaching Prices to the above created temp1d_df 
# # Fix the aliases of the temp1d_df and then write the implementation 

  CU_Output_df = temp1d_df.alias('a')\
  .join(Phone_prices_df.alias('b'),
      [
        F.col('a.Device1_PurchaseMonth')== F.col('b.Month_Year'),
        F.col('a.Device1_Operator') == F.col('b.Operator'),
        F.col('a.Device1_Manufacturer')== F.col('b.Manufacturer'),
        F.col('a.Device1_Model') == F.col('b.Model')
      ],
      'left').join(Phone_prices_df.alias('c'),
                  [
                     F.col('a.Device2_PurchaseMonth')== F.col('c.Month_Year'),
                     F.col('a.Device2_Operator') == F.col('c.Operator'),
                     F.col('a.Device2_Manufacturer')== F.col('c.Manufacturer'),
                     F.col('a.Device2_Model') == F.col('c.Model')
                  ],'left')\
  .select(F.col('a.Country'),\
       'a.Device1_PurchaseMonth',\
       'a.Device1_PurchaseQuarter',\
       'a.QuarterNumber',\
       'a.Device1_Operator',\
       'a.Device1_Operator_Tier',\
       'a.Device1_Manufacturer',\
       'a.Device1_Model',\
       'a.Device1_OS',\
       F.col('a.Device1_Smartphone'),\
       F.col('b.Avg_Store_Cost').alias('Device1_Avg_Store_Cost'),\
       F.col('b.Avg_Retail_Price').alias('Device1_Avg_Retail_Price'),\
       F.col('b.Avg_Full_Cash_Price').alias('Device1_Avg_Full_Cash_Price'),\
       F.col('b.Avg_Online_Advertised_Price').alias('Device1_Avg_Online_Advertised_Price'),\
       'a.Device1_Display_PhysicalSize',\
       'a.Device1_BatteryCapacity',\
       'a.Device1_Chip',\
       'a.Device1_Chip_Designer_Mfg',\
       'a.Device1_Number_of_Cores',\
       'a.Device1_ProcessorSpeed' ,\
       'a.Device1_PlanType',\
       'a.Device1_ScreenSizeBand',\
       'a.Device2_PurchaseMonth',\
       'a.Device2_PurchaseQuarter',\
       'a.QuarterNumber',\
       'a.Device2_Operator',\
       'a.Device2_Operator_Tier',\
       'a.Device2_Manufacturer',\
       'a.Device2_Model',\
       'a.Device2_OS',\
       F.col('a.Device2_Smartphone'),\
       F.col('c.Avg_Store_Cost').alias('Device2_Avg_Store_Cost'),\
       F.col('c.Avg_Retail_Price').alias('Device2_Avg_Retail_Price'),\
       F.col('c.Avg_Full_Cash_Price').alias('Device2_Avg_Full_Cash_Price'),\
       F.col('c.Avg_Online_Advertised_Price').alias('Device2_Avg_Online_Advertised_Price'),\
       'a.Device2_Display_PhysicalSize',\
       'a.Device2_BatteryCapacity',\
       'a.Device2_Chip',\
       'a.Device2_Chip_Designer_Mfg',\
       'a.Device2_Number_of_Cores',\
       'a.Device2_ProcessorSpeed' ,\
       'a.Device2_PlanType',\
       'a.Device2_ScreenSizeBand',\
       'a.Quantity',\
       'a.TTU_in_Months',\
       'a.GMV_TTU')


# Calculating the Store Cost Band and Store Cost Band Custom metrics

  CU_Output_df = CU_Output_df.alias('a')\
  .withColumn("Device1_Avg_Store_Cost_Band",
              F.when((F.col('a.Device1_Avg_Store_Cost'))< 150,'Low Tier (<$150)')\
              .when(((F.col('a.Device1_Avg_Store_Cost'))>= 150) & ((F.col('a.Device1_Avg_Store_Cost'))< 450),'Mid Tier ($150-$449)')\
              .when(((F.col('a.Device1_Avg_Store_Cost'))>= 450) & ((F.col('a.Device1_Display_PhysicalSize'))< 5.5),'Premium Tier (Cost >= $450 and Display Size < 5.5)')\
              .when(((F.col('a.Device1_Avg_Store_Cost'))>= 450) & ((F.col('a.Device1_Display_PhysicalSize'))>= 5.5),'Super Premium Tier (Cost >= $450 and Display Size >= 5.5)')
              .otherwise('NA'))\
  .withColumn("Device1_Avg_Store_Cost_Band_Custom",
              F.when((F.col('a.Device1_Avg_Store_Cost'))< 100,'Band 1) Low Tier (<$100)')\
              .when((F.col('a.Device1_Avg_Store_Cost'))< 200,'Band 2) Mid Tier ($100-$199.99)')\
              .when((F.col('a.Device1_Avg_Store_Cost'))< 400,'Band 3) High Tier ($200-$400.00)')\
              .when((F.col('a.Device1_Avg_Store_Cost')) >= 400,'Band 4) Premium Tier ($400 and above)')
              .otherwise('NA'))\
  .withColumn("Device2_Avg_Store_Cost_Band",
              F.when((F.col('a.Device2_Avg_Store_Cost'))< 150,'Low Tier (<$150)')\
              .when(((F.col('a.Device2_Avg_Store_Cost'))>= 150) & ((F.col('a.Device2_Avg_Store_Cost'))< 450),'Mid Tier ($150-$449)')\
              .when(((F.col('a.Device2_Avg_Store_Cost'))>= 450) & ((F.col('a.Device2_Display_PhysicalSize'))< 5.5),'Premium Tier (Cost >= $450 and Display Size < 5.5)')\
              .when(((F.col('a.Device2_Avg_Store_Cost'))>= 450) & ((F.col('a.Device2_Display_PhysicalSize'))>= 5.5),'Super Premium Tier (Cost >= $450 and Display Size >= 5.5)')
              .otherwise('NA'))\
  .withColumn("Device2_Avg_Store_Cost_Band_Custom",
              F.when((F.col('a.Device2_Avg_Store_Cost'))< 100,'Band 1) Low Tier (<$100)')\
              .when((F.col('a.Device2_Avg_Store_Cost'))< 200,'Band 2) Mid Tier ($100-$199.99)')\
              .when((F.col('a.Device2_Avg_Store_Cost'))< 400,'Band 3) High Tier ($200-$400.00)')\
              .when((F.col('a.Device2_Avg_Store_Cost')) >= 400,'Band 4) Premium Tier ($400 and above)')
              .otherwise('NA'))


## Merge Boost and Virgin and also AT&T and Cricket


  CU_Output_df = CU_Output_df.alias('a')\
  .withColumn("Device1_Operator",
              F.when((F.col('a.Device1_Operator').isin('Boost','Virgin Mobile U.S.')==True),'Boost & Virgin')\
              .when((F.col('a.Device1_Operator').isin('AT&T','Cricket')==True),'AT&T & Cricket')
              .otherwise(F.col('a.Device1_Operator')))\
  .withColumn("Device2_Operator",
              F.when((F.col('a.Device2_Operator').isin('Boost','Virgin Mobile U.S.')==True),'Boost & Virgin')\
              .when((F.col('a.Device2_Operator').isin('AT&T','Cricket')==True),'AT&T & Cricket')
              .otherwise(F.col('a.Device2_Operator')))

# Updating Operator Tier for AT&T and Cricket

  CU_Output_df = CU_Output_df.alias('a')\
  .withColumn("Device1_Operator_Tier",
              F.when((F.col('a.Device1_Operator').isin('AT&T & Cricket')==True),'Tier 1')
              .otherwise(F.col('a.Device1_Operator_Tier')))\
  .withColumn("Device2_Operator_Tier",
              F.when((F.col('a.Device2_Operator').isin('AT&T & Cricket')==True),'Tier 1')
              .otherwise(F.col('a.Device2_Operator_Tier'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             F.col('Device1_Operator').alias('Device1_Operator'), \
                                             F.col('Device1_Operator_Tier').alias('Device1_Operator_Tier'),\
                                             'Device1_Manufacturer',\
                                             'Device1_Model',\
                                             'Device1_OS',\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('Device2_Operator').alias('Device2_Operator'), \
                                             F.col('Device2_Operator_Tier').alias('Device2_Operator_Tier'), \
                                             'Device2_Manufacturer',\
                                             'Device2_Model',\
                                             'Device2_OS',\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')

# Performing Update as Others for the required carriers

  CU_Output_df = CU_Output_df.alias('a')\
  .withColumn("Device2_Operator_Update1",
              F.when(
                ((F.col('a.Device2_Operator')=='Boost & Virgin') 
                 & (F.col('a.Device2_PurchaseMonth')<'2012-07-01'))
                |((F.col('a.Device2_Operator')=='Cricket') 
                 & (F.col('a.Device2_PurchaseMonth')<'2011-07-01'))
                |((F.col('a.Device2_Operator')=='MetroPCS') 
                 & (F.col('a.Device2_PurchaseMonth')<'2013-10-01'))
                |((F.col('a.Device2_Operator')=='Sprint') 
                 & (F.col('a.Device2_PurchaseMonth')<'2010-10-01'))
                |((F.col('a.Device2_Operator')=='T-Mobile') 
                 & (F.col('a.Device2_PurchaseMonth')<'2012-07-01'))
                |((F.col('a.Device2_Operator')=='US Cellular')
                 & (F.col('a.Device2_PurchaseMonth')<'2009-07-01'))
                |((F.col('a.Device2_Operator')=='Rogers Wireless') 
                 & (F.col('a.Device2_PurchaseMonth')<'2011-04-01'))
                |((F.col('a.Device2_PurchaseMonth')<'2009-01-01')),'Other')
              .otherwise(F.col('a.Device2_Operator')))\
  .withColumn("Device2_Operator_Tier_update1",
              F.when(
                ((F.col('a.Device2_Operator')=='Boost & Virgin')
                 & (F.col('a.Device2_PurchaseMonth')<'2012-07-01'))
                |((F.col('a.Device2_Operator')=='Cricket') 
                 & (F.col('a.Device2_PurchaseMonth')<'2011-07-01'))
                |((F.col('a.Device2_Operator')=='MetroPCS') 
                 & (F.col('a.Device2_PurchaseMonth')<'2013-10-01'))
                |((F.col('a.Device2_Operator')=='Sprint') 
                 & (F.col('a.Device2_PurchaseMonth')<'2010-10-01'))
                |((F.col('a.Device2_Operator')=='T-Mobile') 
                 & (F.col('a.Device2_PurchaseMonth')<'2012-07-01'))
                |((F.col('a.Device2_Operator')=='US Cellular') 
                 & (F.col('a.Device2_PurchaseMonth')<'2009-07-01'))
                |((F.col('a.Device2_Operator')=='Rogers Wireless')
                 & (F.col('a.Device2_PurchaseMonth')<'2011-04-01'))
                |((F.col('a.Device2_PurchaseMonth')<'2009-01-01')),'NA')
              .otherwise(F.col('a.Device2_Operator_Tier'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             'Device1_Operator', \
                                             'Device1_Operator_Tier',\
                                             'Device1_Manufacturer',\
                                             'Device1_Model',\
                                             'Device1_OS',\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('Device2_Operator_Update1').alias('Device2_Operator'), \
                                             F.col('Device2_Operator_Tier_update1').alias('Device2_Operator_Tier'),\
                                             'Device2_Manufacturer',\
                                             'Device2_Model',\
                                             'Device2_OS',\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')



# For Device 1
#  Mark the OEMs with lower volume as "Other"

# Aggregating to get the quantity and then marking the OEMs with lower volume as "Other"

  temp2_df = CU_Output_df\
  .groupBy(F.col('Device1_Operator'),F.col('Device1_Manufacturer'))\
  .agg(F.sum(F.col('Quantity')).alias('Quantity'))


  CU_Output_df = CU_Output_df.alias('a')\
  .join(
    temp2_df.alias('b'),
    [
      F.col('a.Device1_Operator') == F.col('b.Device1_Operator'),
      F.col('a.Device1_Manufacturer') == F.col('b.Device1_Manufacturer')
    ],'left')\
  .withColumn('Device1_Manufacturer_updated',
              F.when((F.col('b.Quantity') < 1000),'Other')\
              .otherwise(F.col('a.Device1_Manufacturer')))\
  .withColumn('Device1_Model_updated',
              F.when((F.col('b.Quantity') < 1000),'Other')\
              .otherwise(F.col('a.Device1_Model')))\
  .withColumn('Device1_OS_updated',
              F.when((F.col('b.Quantity') < 1000),'Other')\
              .otherwise(F.col('a.Device1_OS'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             'a.Device1_Operator', \
                                             'Device1_Operator_Tier',\
                                             F.col('Device1_Manufacturer_updated').alias('Device1_Manufacturer'),\
                                             F.col('Device1_Model_updated').alias('Device1_Model'),\
                                             F.col('Device1_OS_updated').alias('Device1_OS'),\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('Device2_Operator'), \
                                             F.col('Device2_Operator_Tier'),\
                                             'Device2_Manufacturer',\
                                             'Device2_Model',\
                                             'Device2_OS',\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'a.Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')

# -- Device 2
#  Mark the OEMs with lower volume as "Other"


  temp3_df = CU_Output_df\
  .groupBy(F.col('Device2_Operator'),F.col('Device2_Manufacturer'))\
  .agg(F.sum(F.col('Quantity')).alias('Quantity'))

# Aggregating to get the quantity and then marking the OEMs with lower volume as "Other"
  CU_Output_df = CU_Output_df.alias('a')\
  .join(
    temp3_df.alias('b'),
    [
      F.col('a.Device2_Operator') == F.col('b.Device2_Operator'),
      F.col('a.Device2_Manufacturer') == F.col('b.Device2_Manufacturer')
    ],'left')\
  .withColumn('Device2_Manufacturer_updated',
              F.when((F.col('b.Quantity') < 1000),'Other')\
              .otherwise(F.col('a.Device2_Manufacturer')))\
  .withColumn('Device2_Model_updated',
              F.when((F.col('b.Quantity') < 1000),'Other')\
              .otherwise(F.col('a.Device2_Model')))\
  .withColumn('Device2_OS_updated',
              F.when((F.col('b.Quantity') < 1000),'Other')\
              .otherwise(F.col('a.Device2_OS'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             'a.Device1_Operator', \
                                             'Device1_Operator_Tier',\
                                             F.col('Device1_Manufacturer'),\
                                             F.col('Device1_Model'),\
                                             F.col('Device1_OS'),\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('a.Device2_Operator'), \
                                             F.col('Device2_Operator_Tier'),\
                                             F.col('Device2_Manufacturer_updated').alias('Device2_Manufacturer'),\
                                             F.col('Device2_Model_updated').alias('Device2_Model'),\
                                             F.col('Device2_OS_updated').alias('Device2_OS'),\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'a.Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')


# -- Device 1
# -- Mark the Models with lower volume as "Other"


  temp4_df = CU_Output_df\
  .groupBy(F.col('Device1_Model'))\
  .agg(F.sum(F.col('Quantity')).alias('Quantity'))

# Aggregating to get the quantity and then marking the Models with lower volume as "Other"
  CU_Output_df = CU_Output_df.alias('a')\
  .join(
    temp4_df.alias('b'),
    [
      F.col('a.Device1_Model') == F.col('b.Device1_Model')
    ],'left')\
  .withColumn('Device1_Model_updated',
              F.when((F.col('b.Quantity') < 500),'Other')\
              .otherwise(F.col('a.Device1_Model'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             'a.Device1_Operator', \
                                             'Device1_Operator_Tier',\
                                             F.col('Device1_Manufacturer'),\
                                             F.col('Device1_Model_updated').alias('Device1_Model'),\
                                             F.col('Device1_OS'),\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('a.Device2_Operator'), \
                                             F.col('Device2_Operator_Tier'),\
                                             F.col('Device2_Manufacturer'),\
                                             F.col('Device2_Model'),\
                                             F.col('Device2_OS'),\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'a.Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')


# -- Device 2
# -- Mark the Models with lower volume as "Other"


  temp5_df = CU_Output_df\
  .groupBy(F.col('Device2_Model'))\
  .agg(F.sum(F.col('Quantity')).alias('Quantity'))

# Aggregating to get the quantity and then marking the Models with lower volume as "Other"
  CU_Output_df = CU_Output_df.alias('a')\
  .join(
    temp5_df.alias('b'),
    [
      F.col('a.Device2_Model') == F.col('b.Device2_Model')
    ],'left')\
  .withColumn('Device2_Model_updated',
              F.when((F.col('b.Quantity') < 500),'Other')\
              .otherwise(F.col('a.Device2_Model'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             'a.Device1_Operator', \
                                             'Device1_Operator_Tier',\
                                             F.col('Device1_Manufacturer'),\
                                             F.col('Device1_Model'),\
                                             F.col('Device1_OS'),\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('a.Device2_Operator'), \
                                             F.col('Device2_Operator_Tier'),\
                                             F.col('Device2_Manufacturer'),\
                                             F.col('Device2_Model_updated').alias('Device2_Model'),\
                                             F.col('Device2_OS'),\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'a.Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')

# Fix OS and Operator

  CU_Output_df = CU_Output_df.alias('a')\
  .withColumn("Device1_OS",
              F.when(
                (F.col('a.Device1_OS')
                 .isin('NA', 'Symbian', 'WebOS')==True)
                |(F.col('a.Device1_OS').isNull()),'Other')\
              .otherwise(F.col('a.Device1_OS')))\
  .withColumn("Device2_OS",
              F.when(
                (F.col('a.Device2_OS')
                 .isin('NA', 'Symbian', 'WebOS')==True)
                |(F.col('a.Device2_OS').isNull()),'Other')\
              .otherwise(F.col('a.Device2_OS'))).select('country',\
                                             'Device1_PurchaseMonth',\
                                             'Device1_PurchaseQuarter',\
                                             'QuarterNumber',\
                                             F.col('Device1_Operator'), \
                                             'Device1_Operator_Tier',\
                                             F.col('Device1_Manufacturer'),\
                                             F.col('Device1_Model'),\
                                             F.col('Device1_OS').alias('Device1_OS'),\
                                             'Device1_Smartphone',\
                                             'Device1_Avg_Store_Cost' , \
                                             'Device1_Avg_Retail_Price', \
                                             'Device1_Avg_Full_Cash_Price',\
                                             'Device1_Avg_Online_Advertised_Price',\
                                             'Device1_Display_PhysicalSize',\
                                             'Device1_BatteryCapacity',\
                                             'Device1_Chip', \
                                             'Device1_Chip_Designer_Mfg', \
                                             'Device1_Number_of_Cores',\
                                             'Device1_ProcessorSpeed',\
                                             'Device1_PlanType',\
                                             'Device1_ScreenSizeBand',\
                                             'Device1_Avg_Store_Cost_Band',\
                                             'Device1_Avg_Store_Cost_Band_Custom',\
                                             'Device2_PurchaseMonth',\
                                             'Device2_PurchaseQuarter',\
                                             F.col('Device2_Operator'), \
                                             F.col('Device2_Operator_Tier'),\
                                             F.col('Device2_Manufacturer'),\
                                             F.col('a.Device2_Model'),\
                                             F.col('Device2_OS').alias('Device2_OS'),\
                                             'Device2_Smartphone',\
                                             'Device2_Avg_Store_Cost' , \
                                             'Device2_Avg_Retail_Price', \
                                             'Device2_Avg_Full_Cash_Price',\
                                             'Device2_Avg_Online_Advertised_Price',\
                                             'Device2_Display_PhysicalSize',\
                                             'Device2_BatteryCapacity',\
                                             'Device2_Chip', \
                                             'Device2_Chip_Designer_Mfg', \
                                             'Device2_Number_of_Cores',\
                                             'Device2_ProcessorSpeed',\
                                             'Device2_PlanType',\
                                             'Device2_ScreenSizeBand',\
                                             'Device2_Avg_Store_Cost_Band',\
                                             'Device2_Avg_Store_Cost_Band_Custom',\
                                             'a.Quantity',\
                                             'TTU_in_Months',\
                                             'GMV_TTU')

# Removing Canada data
#   CU_Output_df = CU_Output_df.where("country <> 'Canada'")

  CU_Output_df = CU_Output_df.dropDuplicates()
# Saving dataframe into the CU output table
  CU_Output_df.write.saveAsTable(CU_Output_output_table, format = 'parquet', mode ='overwrite')

## Calculating the Loyalty rates of OEMs

  CU_Output_Device_Loyalty_Rate_df = CU_Output_df.alias('a')\
  .groupBy('a.Device1_Manufacturer', 'a.Device1_Avg_Store_Cost_Band_Custom' , 'a.Device2_PurchaseMonth')\
  .agg(F.sum(F.col('a.Quantity').cast(DoubleType())).alias('Sum_Quantity'),\
       F.sum(F.when((F.col('a.Device1_Manufacturer') == F.col('a.Device2_Manufacturer')),F.col('a.Quantity')).otherwise(F.lit(0))).alias('Sub_Quantity'))

  CU_Output_Device_Loyalty_Rate_df = CU_Output_Device_Loyalty_Rate_df.select(F.col('Device1_Manufacturer'),\
                                                                                    F.col('Device1_Avg_Store_Cost_Band_Custom'),\
                                                                                    F.col('Device2_PurchaseMonth'),\
                                                                                    (F.col('Sub_Quantity')/F.col('Sum_Quantity')).alias('Loyalty_Rate'))

  CU_Output_Device_Loyalty_Rate_temp = CU_Output_Device_Loyalty_Rate_df\
  .select('Device1_Manufacturer','Device1_Avg_Store_Cost_Band_Custom').distinct()


  Loyalty_lookup_diff_temp = Device_Loyalty_Store_band_lookup.alias('a')\
  .join(
    CU_Output_Device_Loyalty_Rate_temp.alias('b'),
    [
      F.col('a.Device1_Manufacturer') == F.col('b.Device1_Manufacturer'),
      F.col('a.Device1_Avg_Store_Cost_Band_Custom') == F.col('b.Device1_Avg_Store_Cost_Band_Custom')
    ],'left')\
  .where("b.Device1_Manufacturer is null and b.Device1_Avg_Store_Cost_Band_Custom is null")\
  .select('a.*')\
  .withColumn('Device2_PurchaseMonth',F.lit('2014-01-01'))\
  .withColumn('Loyalty_Rate', F.lit('Null'))

  CU_Output_Device_Loyalty_Rate_df = CU_Output_Device_Loyalty_Rate_df.union(Loyalty_lookup_diff_temp)

# Saving dataframe into the Loyalty Rate output table
  CU_Output_Device_Loyalty_Rate_df.write.saveAsTable(CU_Output_Device_Loyalty_Rate_output_table, format = 'parquet', mode ='overwrite')

# Creating table for sankey chart
# Renaming Average Store Cost bands 

  CU_Output_Single_Sankey_df = CU_Output_df.alias('a')\
  .withColumn("Device1_Avg_Store_Cost_Band",
              F.when((F.col('a.Device1_Avg_Store_Cost'))< 150,'Low Tier')\
              .when(((F.col('a.Device1_Avg_Store_Cost'))>= 150) & ((F.col('a.Device1_Avg_Store_Cost'))< 450),'Mid Tier')\
              .when(((F.col('a.Device1_Avg_Store_Cost'))>= 450) & ((F.col('a.Device1_Display_PhysicalSize'))< 5.5),'Premium Tier')\
              .when(((F.col('a.Device1_Avg_Store_Cost'))>= 450) & ((F.col('a.Device1_Display_PhysicalSize'))>= 5.5),'Super Premium Tier')
              .otherwise('NA'))\
  .withColumn("Device2_Avg_Store_Cost_Band",
              F.when((F.col('a.Device2_Avg_Store_Cost'))< 150,'Low Tier')\
              .when(((F.col('a.Device2_Avg_Store_Cost'))>= 150) & ((F.col('a.Device2_Avg_Store_Cost'))< 450),'Mid Tier')\
              .when(((F.col('a.Device2_Avg_Store_Cost'))>= 450) & ((F.col('a.Device2_Display_PhysicalSize'))< 5.5),'Premium Tier')\
              .when(((F.col('a.Device2_Avg_Store_Cost'))>= 450) & ((F.col('a.Device2_Display_PhysicalSize'))>= 5.5),'Super Premium Tier')
              .otherwise('NA'))

# Aggregating dataframe for Single Sankey

  CU_Output_Single_Sankey_df = CU_Output_Single_Sankey_df\
  .where("country = 'US' and Device2_PurchaseMonth > '2011-12-31'")\
  .groupBy('Device1_PurchaseMonth', 'Device1_Operator', 'Device1_Manufacturer', 'Device1_Model' ,
           'Device1_Avg_Store_Cost_Band','Device1_OS','Device2_PurchaseMonth', 'Device2_Operator',
           'Device2_Manufacturer', 'Device2_Model' ,'Device2_Avg_Store_Cost_Band','Device2_OS')\
  .agg(F.sum('Quantity').alias('Quantity'),\
     F.sum('GMV_TTU').alias('GMV_TTU'))\
  .select('Device1_PurchaseMonth'\
        ,'Device1_Operator'\
        ,'Device1_Manufacturer'\
        ,'Device1_Model'\
        ,'Device1_Avg_Store_Cost_Band'\
        ,'Device1_OS'\
        ,'Device2_PurchaseMonth'\
        ,'Device2_Operator'\
        ,'Device2_Manufacturer'\
        ,'Device2_Model'\
        ,'Device2_Avg_Store_Cost_Band'\
        ,'Device2_OS'\
        ,'Quantity'\
        ,'GMV_TTU'\
        ,F.lit('link').alias('link'))

#  Saving dataframe to Single Sankey table
  CU_Output_Single_Sankey_df.write.saveAsTable(CU_Output_Single_Sankey_output_table, format = 'parquet', mode ='overwrite')
---------------------------------------------------------------------------------------------------------------------------------------
## Function call

source_table = spark.table('ganges.device_modeling_table')
Device_Loyalty_Store_band_lookup  = spark.table("group_mr.CU_Output_Device_Loyalty_Store_Bands_Lookup")
portal_P1_specs = sqlContext.createDataFrame(Portal_DeviceP1Parameters, schema)
output_into_excel_main_From_2009_Till_2012 = spark.table('group_mr.output_into_excel_main_From_2009_Till_2012')
output_into_excel_main = spark.table('group_mr.output_into_excel_main')

## Calling the function
logger.info("CUR Monthly - Running CUR Monthly the function.")
CUR_Monthly(source_table,Device_Loyalty_Store_band_lookup,portal_P1_specs,output_into_excel_main_From_2009_Till_2012,output_into_excel_main)
logger.info("CUR Monthly run Successful.")
---------------------------------------------------------------------------------------------------------------------------------------
